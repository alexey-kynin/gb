# 4-1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
# В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия.
# Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.

from sys import argv

script_name, working, ante, premium, third_param = argv

wage = int(working) * int(ante) + int(premium)

print(f"({working} * {ante}) + {premium} ={wage}")

# 4-2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.

orig_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55] #исходный список

def f_gen(my_list): #создаем фенкцию генератор
    prev_el = 0 #это буде пред идущий элемент
    for el in my_list: #цикл по исходному списку
        if(el > prev_el):
            yield el
        prev_el =el

a = f_gen(orig_list)

for i in a:  #! тут проблема с формированием списка(
    print(i)

# 4-3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21.
# Необходимо решить задание в одну строку.

new_list = [el for el in range(20, 240) if el % 20 == 0 or el % 21 == 0]

print(f"Новый список: {new_list}")

# 4-4. Представлен список чисел. Определить элементы списка, не имеющие повторений. Сформировать итоговый массив чисел, соответствующих требованию.
# Элементы вывести в порядке их следования в исходном списке. Для выполнения задания обязательно использовать генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]

orig_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11] #исходный список
new_list = []

for val in orig_list: #"Пробегаем" исходный списко
    indices = [i for i, x in enumerate(orig_list) if x == val] # и по каждому значению получаем список индексов вхождения элемента
    if len(indices) == 1: # если вхождение одно, то мы добавляем элемент в new_list
        new_list.append(val)

print(f"Исходный спискок: {orig_list}")
print(f"Результат: {new_list}")

# 4-5. Реализовать формирование списка, используя функцию range() и возможности генератора.
# В список должны войти четные числа от 100 до 1000 (включая границы).
# Необходимо получить результат вычисления произведения всех элементов списка.
from functools import reduce

new_list = [el for el in range(100, 1001) if el % 2 == 0]

def my_func(prev_el, el):
    return prev_el * el

print(f"Исходный список: {new_list}")
print(f"Сумма: {reduce(my_func, new_list)}")

# 4-6. Реализовать два небольших скрипта:
# а) итератор, генерирующий целые числа, начиная с указанного,
# б) итератор, повторяющий элементы некоторого списка, определенного заранее.
# Подсказка: использовать функцию count() и cycle() модуля itertools.
# Обратите внимание, что создаваемый цикл не должен быть бесконечным. Необходимо предусмотреть условие его завершения.
# Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл.
# Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.

#1
from itertools import count

for el in count(5):
    if el > 50:
        break
    else:
        print(el)

#2
from itertools import cycle

orig_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55] #для примера берем список из второй задачи
count_list = len(orig_list) #кол-во элементов в списке

с = 1
for el in cycle(orig_list):
    if с > count_list:
        break
    print(el)
    с += 1

# 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
# При вызове функции должен создаваться объект-генератор. Функция должна вызываться следующим образом: for el in fact(n).
# Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

def fact(n):
    res = 1
    for i in range(1, n):
        res *= i
        yield res

for el in fact(5):
    print(el)